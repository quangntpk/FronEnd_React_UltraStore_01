name: Deploy Node.js FashionHub App to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: npm install and fix dependencies
        run: |
          npm install --legacy-peer-deps

      - name: Create vite.config.js if not exists
        run: |
          if [ ! -f vite.config.js ]; then
            cat << 'EOF' > vite.config.js
          import { defineConfig } from "vite";
          import react from "@vitejs/plugin-react-swc";
          import path from "path";
          import { componentTagger } from "lovable-tagger";

          export default defineConfig(({ mode }) => ({
            server: { host: "::", port: 8080 },
            plugins: [react(), mode === "development" && componentTagger()].filter(Boolean),
            resolve: { alias: { "@": path.resolve(__dirname, "./src") } },
            build: { rollupOptions: { external: ["react-quill/dist/quill.snow.css"] } },
          }));
          EOF
          fi

      - name: Running vite build...
        run: |
          echo "Running vite build..."
          CI=false npx vite build --mode production || { echo "Vite build failed"; exit 1; }
          ls -la
          if [ ! -d "dist/" ]; then echo "Error: dist/ directory not found"; exit 1; fi
          echo "Build contents:"
          ls -la dist/

      - name: Create deployment package
        run: |
          mkdir deployment-package
          
          # ✅ SỬA: Copy toàn bộ dist folder VÀ contents trực tiếp
          if [ -d "dist" ]; then
            # Copy dist contents to root of deployment package
            cp -r dist/* deployment-package/
            # Also copy dist folder for server reference
            mkdir -p deployment-package/dist
            cp -r dist/* deployment-package/dist/
          fi
          
          cp server.cjs deployment-package/
          
          # Create production package.json
          cat << 'EOF' > deployment-package/package.json
          {
            "name": "fashionhub-production",
            "version": "1.0.0",
            "main": "server.cjs",
            "scripts": { 
              "start": "node server.cjs",
              "health": "curl http://localhost:$PORT/health || true"
            },
            "dependencies": {
              "express": "^4.18.2",
              "cors": "^2.8.5"
            },
            "engines": { 
              "node": "20.x",
              "npm": ">=8.0.0"
            }
          }
          EOF

          # ✅ THÊM: web.config cho Azure
          cat << 'EOF' > deployment-package/web.config
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.cjs" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.cjs"/>
                  </rule>
                </rules>
              </rewrite>
              <iisnode 
                nodeProcessCommandLine="node"
                interceptor="iisnode/interceptor.js" 
                loggingEnabled="true"
                devErrorsEnabled="true"
              />
            </system.webServer>
          </configuration>
          EOF

          echo "Deployment package structure:"
          ls -la deployment-package/
          
          cd deployment-package
          npm install --production --legacy-peer-deps
          cd ..

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: deployment-package/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: node-app

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_FD6F52F2862B45FA98322583479D7585 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_05BE2F3777B44714AE907F61B4DCD33C }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_1617E5DD0A844789AE7AA1CAD9F5C9FC }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'FashionHub'
          slot-name: 'Production'
          package: node-app