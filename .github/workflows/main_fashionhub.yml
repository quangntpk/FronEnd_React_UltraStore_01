name: Deploy Node.js FashionHub App to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Clean install dependencies
        run: |
          echo "🧹 Cleaning npm cache and node_modules..."
          npm cache clean --force
          rm -rf node_modules package-lock.json
          echo "📦 Installing dependencies..."
          npm install --legacy-peer-deps --no-audit --no-fund

      - name: Create optimized vite.config.js
        run: |
          echo "⚙️ Creating production vite config..."
          cat << 'EOF' > vite.config.production.js
          import { defineConfig } from "vite";
          import react from "@vitejs/plugin-react-swc";
          import path from "path";

          export default defineConfig({
            plugins: [react()],
            resolve: { 
              alias: { "@": path.resolve(__dirname, "./src") } 
            },
            build: { 
              outDir: "dist",
              emptyOutDir: true,
              sourcemap: false,
              minify: "esbuild",
              chunkSizeWarningLimit: 1600,
              rollupOptions: { 
                external: ["react-quill/dist/quill.snow.css"],
                output: {
                  manualChunks: {
                    vendor: ['react', 'react-dom'],
                    router: ['react-router-dom']
                  }
                }
              }
            },
            define: {
              'process.env.NODE_ENV': '"production"'
            }
          });
          EOF

      - name: Build React application
        run: |
          echo "🏗️ Building React application for production..."
          NODE_ENV=production npx vite build -c vite.config.production.js
          
          echo "📊 Build verification:"
          ls -la
          if [ ! -d "dist/" ]; then 
            echo "❌ ERROR: dist/ directory not found after build"
            exit 1
          fi
          
          echo "📂 Dist folder contents:"
          ls -la dist/
          
          if [ ! -f "dist/index.html" ]; then
            echo "❌ ERROR: index.html not found in dist/"
            exit 1
          fi
          
          echo "✅ Build successful!"

      - name: Create Azure deployment package
        run: |
          echo "📦 Creating deployment package..."
          mkdir deployment-package
          
          # ✅ CRITICAL: Copy dist FOLDER (not contents) to match server expectation
          cp -r dist deployment-package/
          cp server.cjs deployment-package/
          
          # Create optimized package.json for Azure
          cat << 'EOF' > deployment-package/package.json
          {
            "name": "fashionhub-azure",
            "version": "1.0.0",
            "main": "server.cjs",
            "scripts": { 
              "start": "node server.cjs"
            },
            "dependencies": {
              "express": "^4.18.2",
              "cors": "^2.8.5"
            },
            "engines": { 
              "node": "20.x",
              "npm": ">=10.0.0"
            }
          }
          EOF

          # ✅ Create web.config for Azure App Service
          cat << 'EOF' > deployment-package/web.config
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.cjs" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.cjs"/>
                  </rule>
                </rules>
              </rewrite>
              <iisnode 
                nodeProcessCommandLine="node"
                loggingEnabled="true"
                devErrorsEnabled="true"
                watchedFiles="*.js"
              />
              <defaultDocument>
                <files>
                  <clear />
                  <add value="server.cjs" />
                </files>
              </defaultDocument>
            </system.webServer>
          </configuration>
          EOF

          # ✅ Create .deployment file for Azure
          cat << 'EOF' > deployment-package/.deployment
          [config]
          command = npm install --production && node server.cjs
          EOF

          echo "📊 Deployment package structure:"
          ls -la deployment-package/
          echo "📊 Dist folder in package:"
          ls -la deployment-package/dist/
          echo "📊 Server file:"
          ls -la deployment-package/server.cjs

          # Install production dependencies
          cd deployment-package
          echo "📦 Installing production dependencies..."
          npm install --production --no-audit --no-fund --legacy-peer-deps
          
          echo "📊 Node modules installed:"
          ls -la node_modules/ | head -10
          
          echo "📊 Final package size:"
          du -sh .
          cd ..

      - name: Verify deployment package
        run: |
          echo "🔍 Final verification of deployment package..."
          
          # Check critical files exist
          test -f deployment-package/server.cjs || { echo "❌ server.cjs missing"; exit 1; }
          test -f deployment-package/package.json || { echo "❌ package.json missing"; exit 1; }
          test -d deployment-package/dist || { echo "❌ dist folder missing"; exit 1; }
          test -f deployment-package/dist/index.html || { echo "❌ index.html missing"; exit 1; }
          test -d deployment-package/node_modules || { echo "❌ node_modules missing"; exit 1; }
          
          echo "✅ All critical files present"
          echo "📊 Package ready for deployment"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: deployment-package/
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: node-app

      - name: Verify downloaded artifact
        run: |
          echo "🔍 Verifying downloaded artifact..."
          ls -la node-app/
          test -f node-app/server.cjs || { echo "❌ server.cjs missing in artifact"; exit 1; }
          test -d node-app/dist || { echo "❌ dist folder missing in artifact"; exit 1; }
          echo "✅ Artifact verification successful"

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_FD6F52F2862B45FA98322583479D7585 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_05BE2F3777B44714AE907F61B4DCD33C }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_1617E5DD0A844789AE7AA1CAD9F5C9FC }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'FashionHub'
          slot-name: 'Production'
          package: node-app

      - name: Post-deployment verification
        run: |
          echo "🔍 Waiting for deployment to stabilize..."
          sleep 30
          
          echo "🏥 Testing health endpoint..."
          curl -f https://fashionhub.azurewebsites.net/health || echo "⚠️ Health check failed"
          
          echo "🐛 Testing debug endpoint..."
          curl -f https://fashionhub.azurewebsites.net/api/debug || echo "⚠️ Debug endpoint failed"
          
          echo "✅ Deployment verification completed"